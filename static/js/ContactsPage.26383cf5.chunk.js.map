{"version":3,"sources":["redux/contactsSelectors.js","components/contacts/contactsForm/ContactsForm.js","components/contacts/contactsList/ContactsList.js","components/contacts/contactsFilter/ContactsFilter.js","components/contacts/Contacts.js","redux/contactsOperations.js"],"names":["getContactsSelector","state","contacts","items","errorSelector","error","isLoadingSelector","isContactLoading","filterSelector","filter","getFilterContacts","createSelector","contact","name","toLowerCase","includes","ContactsForm","number","onHandleChange","e","props","resetError","target","value","setState","onHandleSubmit","preventDefault","checkDublicateName","alert","addContact","onSubmit","this","onChange","type","pattern","title","required","Button","variant","color","Component","connect","ownProps","ContactsList","deleteContact","map","onClick","id","ContactsFilter","setFilter","Contacts","a","addContactOperation","deleteContactOperation","getFiltered","some","getAllContactOperation","isLoading","filteredContact","mapDispatchToProps","dispatch","setContactLoading","axios","get","response","data","Object","keys","key","getAllContacts","setError","getState","post","console","dir","delete"],"mappings":"0PACMA,EAAsB,SAACC,GAAD,OAAWA,EAAMC,SAASC,OAChDC,EAAgB,SAACH,GAAD,OAAWA,EAAMC,SAASG,OAC1CC,EAAoB,SAACL,GAAD,OAAWA,EAAMC,SAASK,kBAC9CC,EAAiB,SAACP,GAAD,OAAWA,EAAMC,SAASO,QAC3CC,EAAoBC,YACxB,CAACX,EAAqBQ,IACtB,SAACN,EAAUO,GAAX,OACEP,EAASO,QAAO,SAACG,GAAD,OACdA,EAAQC,KAAKC,cAAcC,SAASN,EAAOK,qB,eCH3CE,E,4MACJf,MAAQ,CACNY,KAAM,GACNI,OAAQ,I,EAEVC,eAAiB,SAACC,GAChB,EAAKC,MAAMf,OAAS,EAAKe,MAAMC,aAC/B,MAAwBF,EAAEG,OAAlBT,EAAR,EAAQA,KAAMU,EAAd,EAAcA,MACd,EAAKC,SAAL,eAAiBX,EAAOU,K,EAE1BE,eAAiB,SAACN,GAChBA,EAAEO,iBACE,EAAKN,MAAMO,mBAAmB,EAAK1B,MAAMY,MAC3Ce,MAAM,GAAD,OAAI,EAAK3B,MAAMY,KAAf,oDAGP,EAAKO,MAAMS,WAAW,EAAK5B,OAC3B,EAAKuB,SAAS,CACZX,KAAM,GACNI,OAAQ,O,4CAGZ,WACE,OACE,qCACE,2CACA,uBAAMa,SAAUC,KAAKN,eAArB,UACE,0CAEE,uBACEO,SAAUD,KAAKb,eACfK,MAAOQ,KAAK9B,MAAMY,KAClBoB,KAAK,OACLpB,KAAK,OACLqB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAGZ,4CAEE,uBACEJ,SAAUD,KAAKb,eACfK,MAAOQ,KAAK9B,MAAMgB,OAClBgB,KAAK,MACLpB,KAAK,SACLqB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAIZ,cAACC,EAAA,EAAD,CAAQJ,KAAK,SAASK,QAAQ,YAAYC,MAAM,UAAhD,mC,GApDiBC,aAiEZC,eALS,SAACxC,EAAOyC,GAC9B,MAAO,CACLrC,MAAOD,EAAcH,MAGe,CAAEoB,gBAA3BoB,CAAyCzB,GClDzC2B,EAnBM,SAAC,GAAiC,IAA/BzC,EAA8B,EAA9BA,SAAU0C,EAAoB,EAApBA,cAChC,OACE,mCACE,2CAEG1C,EAAS2C,KAAI,SAACjC,GAAD,OACZ,+BACE,4BAAIA,EAAQC,OACZ,4BAAID,EAAQK,SACZ,wBAAQ6B,QAASF,EAAeX,KAAK,SAASc,GAAInC,EAAQmC,GAA1D,sBAHOnC,EAAQmC,aCGZC,EATQ,SAAC,GAA2B,IAAzBvC,EAAwB,EAAxBA,OAAQwC,EAAgB,EAAhBA,UAChC,OACE,4CAEE,uBAAOhB,KAAK,OAAOV,MAAOd,EAAQuB,SAAUiB,Q,yBCa5CC,E,4MAIJrB,W,uCAAa,WAAOjB,GAAP,SAAAuC,EAAA,sDACX,EAAK/B,MAAMgC,oBAAoBxC,GADpB,2C,wDAIbgC,c,uCAAgB,WAAOzB,GAAP,eAAAgC,EAAA,sDACNJ,EAAO5B,EAAEG,OAATyB,GACR,EAAK3B,MAAMiC,uBAAuBN,GAFpB,2C,wDAKhBE,UAAY,SAAC9B,GACX,IAAQI,EAAUJ,EAAEG,OAAZC,MACR,EAAKH,MAAMkC,YAAY/B,I,EAGzBI,mBAAqB,SAACd,GACpB,OAAO,EAAKO,MAAMlB,SAASqD,MAAK,SAAC3C,GAAD,OAAaA,EAAQC,OAASA,M,8FAlBhE,sBAAAsC,EAAA,sDACEpB,KAAKX,MAAMoC,yBADb,gD,0EAqBA,WACE,OACE,qCACGzB,KAAKX,MAAMf,OAAS,6BAAK0B,KAAKX,MAAMf,QACpC0B,KAAKX,MAAMqC,WAAa,+CACzB,cAAC,EAAD,CACE5B,WAAYE,KAAKF,WACjBF,mBAAoBI,KAAKJ,qBAE3B,cAAC,EAAD,CAAgBlB,OAAQsB,KAAKX,MAAMX,OAAQwC,UAAWlB,KAAKkB,YAC3D,cAAC,EAAD,CACEL,cAAeb,KAAKa,cACpB1C,SAAU6B,KAAKX,MAAMsC,yB,GAlCRlB,aAiDjBmB,EAAqB,CACzBH,uBC9B6B,SAACT,GAAD,8CAAQ,WAAOa,GAAP,iBAAAT,EAAA,6DACrCS,EAASC,eAD4B,kBAGZC,IAAMC,IAAN,qEAHY,YAG7BC,EAH6B,QAOtBC,KAPsB,iBAQ3B/D,EAAWgE,OAAOC,KAAKH,EAASC,MAAMpB,KAAI,SAACuB,GAAD,mBAAC,eAC5CJ,EAASC,KAAKG,IAD6B,IAE9CrB,GAAIqB,OAENR,EAASS,YAAenE,IAZS,4GAenC0D,EAASU,YAAS,KAAMN,SAASC,KAAK5D,QAfH,yBAiBnCuD,EAASC,eAjB0B,6EAAR,uDD+B7BT,oBC7D0B,SAACxC,GAAD,8CAAa,WAAOgD,EAAUW,GAAjB,eAAApB,EAAA,6DACvCS,EAASC,eAD8B,kBAGdC,IAAMU,KAAN,oEAErB5D,GALmC,OAG/BoD,EAH+B,OAOrCJ,EAAS/B,YAAW,2BAAKjB,GAAN,IAAemC,GAAIiB,EAASC,KAAKpD,SAPf,gDASrC4D,QAAQC,IAAR,MACAd,EAASU,YAAS,KAAMN,SAASC,KAAK5D,QAVD,yBAYrCuD,EAASC,eAZ4B,4EAAb,yDD8D1BR,uBC9C6B,SAACN,GAAD,8CAAQ,WAAOa,GAAP,SAAAT,EAAA,6DACrCS,EAASC,eAD4B,kBAG7BC,IAAMa,OAAN,uEAC4D5B,EAD5D,UAH6B,OAMnCa,EAAShB,YAAcG,IANY,gDAQnCa,EAASU,YAAS,KAAMN,SAASC,KAAK5D,QARH,yBAUnCuD,EAASC,eAV0B,4EAAR,uDD+C7BP,iBAEab,uBAdS,SAACxC,GAAD,MAAY,CAClCC,SAAUF,EAAoBC,GAC9BwD,UAAWnD,EAAkBL,GAC7BI,MAAOD,EAAcH,GACrBQ,OAAQD,EAAeP,GACvByD,gBAAiBhD,EAAkBT,MASG0D,EAAzBlB,CAA6CS","file":"static/js/ContactsPage.26383cf5.chunk.js","sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\r\nconst getContactsSelector = (state) => state.contacts.items;\r\nconst errorSelector = (state) => state.contacts.error;\r\nconst isLoadingSelector = (state) => state.contacts.isContactLoading;\r\nconst filterSelector = (state) => state.contacts.filter;\r\nconst getFilterContacts = createSelector(\r\n  [getContactsSelector, filterSelector],\r\n  (contacts, filter) =>\r\n    contacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase())\r\n    )\r\n);\r\n\r\nexport {\r\n  getContactsSelector,\r\n  errorSelector,\r\n  isLoadingSelector,\r\n  filterSelector,\r\n  getFilterContacts,\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { resetError } from \"../../../redux/contactsAction\";\r\nimport { errorSelector } from \"../../../redux/contactsSelectors\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nclass ContactsForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n  onHandleChange = (e) => {\r\n    this.props.error && this.props.resetError();\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n  onHandleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (this.props.checkDublicateName(this.state.name)) {\r\n      alert(`${this.state.name} уже есть! `);\r\n      return;\r\n    }\r\n    this.props.addContact(this.state);\r\n    this.setState({\r\n      name: \"\",\r\n      number: \"\",\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        <h2>Phonebook</h2>\r\n        <form onSubmit={this.onHandleSubmit}>\r\n          <label>\r\n            Name:\r\n            <input\r\n              onChange={this.onHandleChange}\r\n              value={this.state.name}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n            />\r\n          </label>\r\n          <label>\r\n            Number:\r\n            <input\r\n              onChange={this.onHandleChange}\r\n              value={this.state.number}\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n            />\r\n          </label>\r\n          {/* <button type=\"submit\">Add contact</button> */}\r\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n            Add contact\r\n          </Button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    error: errorSelector(state),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, { resetError })(ContactsForm);\r\n","import React from \"react\";\r\n\r\nconst ContactsList = ({ contacts, deleteContact }) => {\r\n  return (\r\n    <>\r\n      <ul>\r\n        Contacts:\r\n        {contacts.map((contact) => (\r\n          <li key={contact.id}>\r\n            <p>{contact.name}</p>\r\n            <p>{contact.number}</p>\r\n            <button onClick={deleteContact} type=\"button\" id={contact.id}>\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactsList;\r\n","import React from \"react\";\r\n\r\nconst ContactsFilter = ({ filter, setFilter }) => {\r\n  return (\r\n    <label>\r\n      Filter:\r\n      <input type=\"text\" value={filter} onChange={setFilter} />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default ContactsFilter;\r\n","import React, { Component } from \"react\";\r\nimport ContactsForm from \"./contactsForm/ContactsForm\";\r\nimport ContactsList from \"./contactsList/ContactsList\";\r\nimport ContactsFilter from \"./contactsFilter/ContactsFilter\";\r\nimport { getFiltered } from \"../../redux/contactsAction\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  addContactOperation,\r\n  deleteContactOperation,\r\n  getAllContactOperation,\r\n} from \"../../redux/contactsOperations\";\r\nimport {\r\n  errorSelector,\r\n  getContactsSelector,\r\n  isLoadingSelector,\r\n  filterSelector,\r\n  getFilterContacts,\r\n} from \"../../redux/contactsSelectors\";\r\n\r\nclass Contacts extends Component {\r\n  async componentDidMount() {\r\n    this.props.getAllContactOperation();\r\n  }\r\n  addContact = async (contact) => {\r\n    this.props.addContactOperation(contact);\r\n  };\r\n\r\n  deleteContact = async (e) => {\r\n    const { id } = e.target;\r\n    this.props.deleteContactOperation(id);\r\n  };\r\n\r\n  setFilter = (e) => {\r\n    const { value } = e.target;\r\n    this.props.getFiltered(value);\r\n  };\r\n\r\n  checkDublicateName = (name) => {\r\n    return this.props.contacts.some((contact) => contact.name === name);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.props.error && <h2>{this.props.error}</h2>}\r\n        {this.props.isLoading && <h2>Loading......</h2>}\r\n        <ContactsForm\r\n          addContact={this.addContact}\r\n          checkDublicateName={this.checkDublicateName}\r\n        />\r\n        <ContactsFilter filter={this.props.filter} setFilter={this.setFilter} />\r\n        <ContactsList\r\n          deleteContact={this.deleteContact}\r\n          contacts={this.props.filteredContact}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: getContactsSelector(state),\r\n  isLoading: isLoadingSelector(state),\r\n  error: errorSelector(state),\r\n  filter: filterSelector(state),\r\n  filteredContact: getFilterContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  getAllContactOperation,\r\n  addContactOperation,\r\n  deleteContactOperation,\r\n  getFiltered,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);\r\n","import axios from \"axios\";\r\nimport {\r\n  addContact,\r\n  deleteContact,\r\n  getAllContacts,\r\n  setContactLoading,\r\n  setError,\r\n} from \"./contactsAction\";\r\n\r\nconst addContactOperation = (contact) => async (dispatch, getState) => {\r\n  dispatch(setContactLoading());\r\n  try {\r\n    const response = await axios.post(\r\n      `https://phonebook-e3785-default-rtdb.firebaseio.com/contacts.json`,\r\n      contact\r\n    );\r\n    dispatch(addContact({ ...contact, id: response.data.name }));\r\n  } catch (error) {\r\n    console.dir(error);\r\n    dispatch(setError(error.response.data.error));\r\n  } finally {\r\n    dispatch(setContactLoading());\r\n  }\r\n};\r\n\r\nconst deleteContactOperation = (id) => async (dispatch) => {\r\n  dispatch(setContactLoading());\r\n  try {\r\n    await axios.delete(\r\n      `https://phonebook-e3785-default-rtdb.firebaseio.com/contacts/${id}.json`\r\n    );\r\n    dispatch(deleteContact(id));\r\n  } catch (error) {\r\n    dispatch(setError(error.response.data.error));\r\n  } finally {\r\n    dispatch(setContactLoading());\r\n  }\r\n};\r\n\r\nconst getAllContactOperation = (id) => async (dispatch) => {\r\n  dispatch(setContactLoading());\r\n  try {\r\n    const response = await axios.get(\r\n      `https://phonebook-e3785-default-rtdb.firebaseio.com/contacts.json`\r\n    );\r\n\r\n    if (response.data) {\r\n      const contacts = Object.keys(response.data).map((key) => ({\r\n        ...response.data[key],\r\n        id: key,\r\n      }));\r\n      dispatch(getAllContacts(contacts));\r\n    } else return;\r\n  } catch (error) {\r\n    dispatch(setError(error.response.data.error));\r\n  } finally {\r\n    dispatch(setContactLoading());\r\n  }\r\n};\r\n\r\nexport { addContactOperation, deleteContactOperation, getAllContactOperation };\r\n"],"sourceRoot":""}